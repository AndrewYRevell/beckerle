# -*- coding: utf-8 -*-
import os
from scipy.io import loadmat
import numpy as np
import copy
import scipy
import seaborn as sns
import matplotlib.pyplot as plt
import random
col = list(range(2,246))
nodesArray=[]
ctrlList=[]
checkMap=np.zeros(shape=(100,117))
T=[36,37,38,39,40,41]
for a in range (4,5):
    ctrlList.append(a)
    file = f"C{a}BNA.txt"
    C = np.loadtxt(file, skiprows=2, usecols = (col))
#Preprocess connectivity matrices
#log normalizing
    C[np.where(C == 0)] = 1
    C = np.log10(C)
    C = C/np.max(C)
#sns.heatmap(C)

#Thresholding
    threshold = .2 #bottom X percent of edge weights are eliminated
    C_thresh = copy.deepcopy(C)
    number_positive_edges = len(np.where(C > 0)[0])
    cutoff = int(np.round(number_positive_edges*threshold))
    positive_edges = C[np.where(C > 0)]
    cutoff_threshold = np.sort(positive_edges)[cutoff]
    C_thresh[np.where(C_thresh < cutoff_threshold)] = 0
    len(np.where(C_thresh > 0)[0])


#parameters
    threshold = .0249

    seed = 216 #ROI number where activity starts
    time_steps = 10 #number of time steps before termination of simulation
    N = len(C_thresh) #number of nodes
    node_state = np.zeros(shape = (time_steps, N))
    node_state[0, seed] = 1 #make seed active
    neighbor_sum_distribution = np.zeros(shape = (time_steps, N))
    for t in range(1, time_steps):
        #print(t)
        
        #print(P/246)
        
        for i in range(N): #loop thru all nodes
            #find neighbors of node i
            previous_state = node_state[t-1,i]
            neighbors = np.where(C_thresh[i,:] > 0)
            neighbors_weight = C_thresh[i,neighbors] 
            neighbors_state = node_state[t-1, neighbors]
            neighbors_sum = np.sum(neighbors_weight * neighbors_state)
            strength = np.sum(neighbors_weight)
            if neighbors_sum >= threshold*strength: #if sum is greater than threshold, make that node active
                node_state[t, i] = 1
            if neighbors_sum < threshold*strength:
                node_state[t, i] = 0
            if previous_state == 1:
                node_state[t, i] = 1
            #neighbor_sum_distribution[t,i] = neighbors_sum/strength
                
        P=np.count_nonzero(node_state[time_steps-1,:])
        b=node_state[:,:]
        d=node_state.flatten()
        nodesArray.append(d)
        #print(node_state[2,:])
        #print(np.all(node_state[time_steps-1,:]==1)) #check if all nodes are fully active
        checkMap=b
"""
    for P in range(2,247):
        threshold=threshold+.0001
        P
        for t in range(1, time_steps):
        #print(t)
        
        #print(P/246)
        
            for i in range(N): #loop thru all nodes
                #find neighbors of node i
                previous_state = node_state[t-1,i]
                neighbors = np.where(C_thresh[i,:] > 0)
                neighbors_weight = C_thresh[i,neighbors] 
                neighbors_state = node_state[t-1, neighbors]
                neighbors_sum = np.sum(neighbors_weight * neighbors_state)
                strength = np.sum(neighbors_weight)
                if neighbors_sum >= threshold*strength: #if sum is greater than threshold, make that node active
                    node_state[t, i] = 1
                if neighbors_sum < threshold*strength:
                    node_state[t, i] = 0
                if previous_state == 1:
                    node_state[t, i] = 1
                #neighbor_sum_distribution[t,i] = neighbors_sum/strength
                P=np.count_nonzero(node_state[time_steps-1,:])
"""         
sns.heatmap(checkMap)
print(threshold)
#print(node_state[:,T[:]])
